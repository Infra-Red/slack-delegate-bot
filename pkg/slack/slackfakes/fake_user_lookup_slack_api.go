// Code generated by counterfeiter. DO NOT EDIT.
package slackfakes

import (
	"sync"

	"github.com/dpb587/slack-delegate-bot/pkg/slack"
	slacka "github.com/slack-go/slack"
)

type FakeUserLookupSlackAPI struct {
	GetUserInfoStub        func(string) (*slacka.User, error)
	getUserInfoMutex       sync.RWMutex
	getUserInfoArgsForCall []struct {
		arg1 string
	}
	getUserInfoReturns struct {
		result1 *slacka.User
		result2 error
	}
	getUserInfoReturnsOnCall map[int]struct {
		result1 *slacka.User
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUserLookupSlackAPI) GetUserInfo(arg1 string) (*slacka.User, error) {
	fake.getUserInfoMutex.Lock()
	ret, specificReturn := fake.getUserInfoReturnsOnCall[len(fake.getUserInfoArgsForCall)]
	fake.getUserInfoArgsForCall = append(fake.getUserInfoArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetUserInfo", []interface{}{arg1})
	fake.getUserInfoMutex.Unlock()
	if fake.GetUserInfoStub != nil {
		return fake.GetUserInfoStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getUserInfoReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUserLookupSlackAPI) GetUserInfoCallCount() int {
	fake.getUserInfoMutex.RLock()
	defer fake.getUserInfoMutex.RUnlock()
	return len(fake.getUserInfoArgsForCall)
}

func (fake *FakeUserLookupSlackAPI) GetUserInfoCalls(stub func(string) (*slacka.User, error)) {
	fake.getUserInfoMutex.Lock()
	defer fake.getUserInfoMutex.Unlock()
	fake.GetUserInfoStub = stub
}

func (fake *FakeUserLookupSlackAPI) GetUserInfoArgsForCall(i int) string {
	fake.getUserInfoMutex.RLock()
	defer fake.getUserInfoMutex.RUnlock()
	argsForCall := fake.getUserInfoArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUserLookupSlackAPI) GetUserInfoReturns(result1 *slacka.User, result2 error) {
	fake.getUserInfoMutex.Lock()
	defer fake.getUserInfoMutex.Unlock()
	fake.GetUserInfoStub = nil
	fake.getUserInfoReturns = struct {
		result1 *slacka.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserLookupSlackAPI) GetUserInfoReturnsOnCall(i int, result1 *slacka.User, result2 error) {
	fake.getUserInfoMutex.Lock()
	defer fake.getUserInfoMutex.Unlock()
	fake.GetUserInfoStub = nil
	if fake.getUserInfoReturnsOnCall == nil {
		fake.getUserInfoReturnsOnCall = make(map[int]struct {
			result1 *slacka.User
			result2 error
		})
	}
	fake.getUserInfoReturnsOnCall[i] = struct {
		result1 *slacka.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUserLookupSlackAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getUserInfoMutex.RLock()
	defer fake.getUserInfoMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUserLookupSlackAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ slack.UserLookupSlackAPI = new(FakeUserLookupSlackAPI)
