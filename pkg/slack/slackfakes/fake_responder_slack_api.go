// Code generated by counterfeiter. DO NOT EDIT.
package slackfakes

import (
	"sync"

	"github.com/dpb587/slack-delegate-bot/pkg/slack"
	slacka "github.com/slack-go/slack"
)

type FakeResponderSlackAPI struct {
	PostMessageStub        func(string, ...slacka.MsgOption) (string, string, error)
	postMessageMutex       sync.RWMutex
	postMessageArgsForCall []struct {
		arg1 string
		arg2 []slacka.MsgOption
	}
	postMessageReturns struct {
		result1 string
		result2 string
		result3 error
	}
	postMessageReturnsOnCall map[int]struct {
		result1 string
		result2 string
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeResponderSlackAPI) PostMessage(arg1 string, arg2 ...slacka.MsgOption) (string, string, error) {
	fake.postMessageMutex.Lock()
	ret, specificReturn := fake.postMessageReturnsOnCall[len(fake.postMessageArgsForCall)]
	fake.postMessageArgsForCall = append(fake.postMessageArgsForCall, struct {
		arg1 string
		arg2 []slacka.MsgOption
	}{arg1, arg2})
	fake.recordInvocation("PostMessage", []interface{}{arg1, arg2})
	fake.postMessageMutex.Unlock()
	if fake.PostMessageStub != nil {
		return fake.PostMessageStub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.postMessageReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeResponderSlackAPI) PostMessageCallCount() int {
	fake.postMessageMutex.RLock()
	defer fake.postMessageMutex.RUnlock()
	return len(fake.postMessageArgsForCall)
}

func (fake *FakeResponderSlackAPI) PostMessageCalls(stub func(string, ...slacka.MsgOption) (string, string, error)) {
	fake.postMessageMutex.Lock()
	defer fake.postMessageMutex.Unlock()
	fake.PostMessageStub = stub
}

func (fake *FakeResponderSlackAPI) PostMessageArgsForCall(i int) (string, []slacka.MsgOption) {
	fake.postMessageMutex.RLock()
	defer fake.postMessageMutex.RUnlock()
	argsForCall := fake.postMessageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeResponderSlackAPI) PostMessageReturns(result1 string, result2 string, result3 error) {
	fake.postMessageMutex.Lock()
	defer fake.postMessageMutex.Unlock()
	fake.PostMessageStub = nil
	fake.postMessageReturns = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeResponderSlackAPI) PostMessageReturnsOnCall(i int, result1 string, result2 string, result3 error) {
	fake.postMessageMutex.Lock()
	defer fake.postMessageMutex.Unlock()
	fake.PostMessageStub = nil
	if fake.postMessageReturnsOnCall == nil {
		fake.postMessageReturnsOnCall = make(map[int]struct {
			result1 string
			result2 string
			result3 error
		})
	}
	fake.postMessageReturnsOnCall[i] = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeResponderSlackAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.postMessageMutex.RLock()
	defer fake.postMessageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeResponderSlackAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ slack.ResponderSlackAPI = new(FakeResponderSlackAPI)
