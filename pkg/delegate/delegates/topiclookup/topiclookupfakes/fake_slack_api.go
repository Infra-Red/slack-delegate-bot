// Code generated by counterfeiter. DO NOT EDIT.
package topiclookupfakes

import (
	"sync"

	"github.com/dpb587/slack-delegate-bot/pkg/delegate/delegates/topiclookup"
	"github.com/nlopes/slack"
)

type FakeSlackAPI struct {
	GetConversationInfoStub        func(string, bool) (*slack.Channel, error)
	getConversationInfoMutex       sync.RWMutex
	getConversationInfoArgsForCall []struct {
		arg1 string
		arg2 bool
	}
	getConversationInfoReturns struct {
		result1 *slack.Channel
		result2 error
	}
	getConversationInfoReturnsOnCall map[int]struct {
		result1 *slack.Channel
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSlackAPI) GetConversationInfo(arg1 string, arg2 bool) (*slack.Channel, error) {
	fake.getConversationInfoMutex.Lock()
	ret, specificReturn := fake.getConversationInfoReturnsOnCall[len(fake.getConversationInfoArgsForCall)]
	fake.getConversationInfoArgsForCall = append(fake.getConversationInfoArgsForCall, struct {
		arg1 string
		arg2 bool
	}{arg1, arg2})
	fake.recordInvocation("GetConversationInfo", []interface{}{arg1, arg2})
	fake.getConversationInfoMutex.Unlock()
	if fake.GetConversationInfoStub != nil {
		return fake.GetConversationInfoStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getConversationInfoReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSlackAPI) GetConversationInfoCallCount() int {
	fake.getConversationInfoMutex.RLock()
	defer fake.getConversationInfoMutex.RUnlock()
	return len(fake.getConversationInfoArgsForCall)
}

func (fake *FakeSlackAPI) GetConversationInfoCalls(stub func(string, bool) (*slack.Channel, error)) {
	fake.getConversationInfoMutex.Lock()
	defer fake.getConversationInfoMutex.Unlock()
	fake.GetConversationInfoStub = stub
}

func (fake *FakeSlackAPI) GetConversationInfoArgsForCall(i int) (string, bool) {
	fake.getConversationInfoMutex.RLock()
	defer fake.getConversationInfoMutex.RUnlock()
	argsForCall := fake.getConversationInfoArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSlackAPI) GetConversationInfoReturns(result1 *slack.Channel, result2 error) {
	fake.getConversationInfoMutex.Lock()
	defer fake.getConversationInfoMutex.Unlock()
	fake.GetConversationInfoStub = nil
	fake.getConversationInfoReturns = struct {
		result1 *slack.Channel
		result2 error
	}{result1, result2}
}

func (fake *FakeSlackAPI) GetConversationInfoReturnsOnCall(i int, result1 *slack.Channel, result2 error) {
	fake.getConversationInfoMutex.Lock()
	defer fake.getConversationInfoMutex.Unlock()
	fake.GetConversationInfoStub = nil
	if fake.getConversationInfoReturnsOnCall == nil {
		fake.getConversationInfoReturnsOnCall = make(map[int]struct {
			result1 *slack.Channel
			result2 error
		})
	}
	fake.getConversationInfoReturnsOnCall[i] = struct {
		result1 *slack.Channel
		result2 error
	}{result1, result2}
}

func (fake *FakeSlackAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getConversationInfoMutex.RLock()
	defer fake.getConversationInfoMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSlackAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ topiclookup.SlackAPI = new(FakeSlackAPI)
