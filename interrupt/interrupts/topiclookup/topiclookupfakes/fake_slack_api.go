// Code generated by counterfeiter. DO NOT EDIT.
package topiclookupfakes

import (
	"sync"

	"github.com/dpb587/slack-delegate-bot/interrupt/interrupts/topiclookup"
	"github.com/nlopes/slack"
)

type FakeSlackAPI struct {
	GetChannelInfoStub        func(string) (*slack.Channel, error)
	getChannelInfoMutex       sync.RWMutex
	getChannelInfoArgsForCall []struct {
		arg1 string
	}
	getChannelInfoReturns struct {
		result1 *slack.Channel
		result2 error
	}
	getChannelInfoReturnsOnCall map[int]struct {
		result1 *slack.Channel
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSlackAPI) GetChannelInfo(arg1 string) (*slack.Channel, error) {
	fake.getChannelInfoMutex.Lock()
	ret, specificReturn := fake.getChannelInfoReturnsOnCall[len(fake.getChannelInfoArgsForCall)]
	fake.getChannelInfoArgsForCall = append(fake.getChannelInfoArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetChannelInfo", []interface{}{arg1})
	fake.getChannelInfoMutex.Unlock()
	if fake.GetChannelInfoStub != nil {
		return fake.GetChannelInfoStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getChannelInfoReturns.result1, fake.getChannelInfoReturns.result2
}

func (fake *FakeSlackAPI) GetChannelInfoCallCount() int {
	fake.getChannelInfoMutex.RLock()
	defer fake.getChannelInfoMutex.RUnlock()
	return len(fake.getChannelInfoArgsForCall)
}

func (fake *FakeSlackAPI) GetChannelInfoArgsForCall(i int) string {
	fake.getChannelInfoMutex.RLock()
	defer fake.getChannelInfoMutex.RUnlock()
	return fake.getChannelInfoArgsForCall[i].arg1
}

func (fake *FakeSlackAPI) GetChannelInfoReturns(result1 *slack.Channel, result2 error) {
	fake.GetChannelInfoStub = nil
	fake.getChannelInfoReturns = struct {
		result1 *slack.Channel
		result2 error
	}{result1, result2}
}

func (fake *FakeSlackAPI) GetChannelInfoReturnsOnCall(i int, result1 *slack.Channel, result2 error) {
	fake.GetChannelInfoStub = nil
	if fake.getChannelInfoReturnsOnCall == nil {
		fake.getChannelInfoReturnsOnCall = make(map[int]struct {
			result1 *slack.Channel
			result2 error
		})
	}
	fake.getChannelInfoReturnsOnCall[i] = struct {
		result1 *slack.Channel
		result2 error
	}{result1, result2}
}

func (fake *FakeSlackAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getChannelInfoMutex.RLock()
	defer fake.getChannelInfoMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeSlackAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ topiclookup.SlackAPI = new(FakeSlackAPI)
